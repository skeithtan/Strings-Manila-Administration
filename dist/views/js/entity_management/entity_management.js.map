{"version":3,"sources":["../../../../views/js/entity_management/entity_management.js"],"names":["fetchStalls","completionHandler","client","query","then","fetchProducts","stallID","EntityManagement","props","state","activeStall","stalls","products","refreshStalls","setState","result","forEach","stall","id","setActiveStall","bind","refreshProducts","activeProducts","Component"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA;AACA,SAASA,WAAT,CAAqBC,iBAArB,EAAwC;AACpCC,WAAOC,KAAP,wFAOGC,IAPH,CAOQH,iBAPR;AAQH;;AAED,SAASI,aAAT,CAAuBC,OAAvB,EAAgCL,iBAAhC,EAAmD;AAC/CC,WAAOC,KAAP,8BAEaG,OAFb,sNAeGF,IAfH,CAeQH,iBAfR;AAgBH;;AAED;;IACMM,gB;;;AACF,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA,wIACTA,KADS;;AAEf,cAAKC,KAAL,GAAa;AACTC,yBAAa,IADJ;AAETC,oBAAQ,IAFC;AAGTC,sBAAU;AAHD,SAAb;;AAMAC,wBAAgB,yBAAM;AAClBb,wBAAY,kBAAU;AAClB,sBAAKc,QAAL,CAAc;AACVH,4BAAQI,OAAOJ;AADL,iBAAd;;AAIA;AACA,oBAAMD,cAAc,MAAKD,KAAL,CAAWC,WAA/B;;AAEA,oBAAIA,gBAAgB,IAApB,EAA0B;AACtB;AACA,wBAAME,WAAWF,YAAYE,QAA7B;;AAEA,0BAAKE,QAAL,CAAc;AACVJ,qCAAa,IADH,CACS;AADT,qBAAd;;AAIAK,2BAAOJ,MAAP,CAAcK,OAAd,CAAsB,iBAAS;AAC3B,4BAAGC,MAAMC,EAAN,KAAaR,YAAYQ,EAA5B,EAAgC;AAC5B;AACAD,kCAAML,QAAN,GAAiBA,QAAjB;AACA,kCAAKE,QAAL,CAAc;AACVJ,6CAAaO,KADH,CACS;AADT,6BAAd;AAGH;AACJ,qBARD;AASH;AACJ,aA1BD;AA2BH,SA5BD;;AA8BAJ;;AAEA,cAAKM,cAAL,GAAsB,MAAKA,cAAL,CAAoBC,IAApB,OAAtB;AAxCe;AAyClB;;;;uCAEcH,K,EAAO;AAAA;;AAClBA,kBAAML,QAAN,GAAiB,IAAjB;;AAEA,iBAAKE,QAAL,CAAc;AACVJ,6BAAaO;AADH,aAAd;;AAIAI,8BAAkB,2BAAM;AACpBhB,8BAAcY,MAAMC,EAApB,EAAwB,kBAAU;AAC9B,wBAAIR,cAAc,OAAKD,KAAL,CAAWC,WAA7B;AACAA,gCAAYE,QAAZ,GAAuBG,OAAOE,KAAP,CAAaK,cAApC;;AAEA,2BAAKR,QAAL,CAAc;AACVJ,qCAAaA;AADH,qBAAd;AAGH,iBAPD;AAQH,aATD;;AAWAW;AACH;;;iCAEQ;AACL,mBACI;AAAA;AAAA,kBAAK,IAAG,yBAAR;AACK,+BAAU,qDADf;AAEI,kEAAQ,QAAQ,KAAKZ,KAAL,CAAWE,MAA3B;AACQ,iCAAa,KAAKF,KAAL,CAAWC,WADhC;AAEQ,oCAAgB,KAAKS,cAF7B,GAFJ;AAKI,oEAAU,aAAa,KAAKV,KAAL,CAAWC,WAAlC;AALJ,aADJ;AASH;;;;EA3E0B,gBAAMa,S;;kBA8EtBhB,gB","file":"entity_management.js","sourcesContent":["import React from 'react';\nimport Stalls from './stalls';\nimport Products from './products';\n\n//Fetch data\nfunction fetchStalls(completionHandler) {\n    client.query(`\n    {\n        stalls {\n            id\n            name\n        }\n    }\n    `).then(completionHandler);\n}\n\nfunction fetchProducts(stallID, completionHandler) {\n    client.query(`\n    {\n      stall(id:${stallID}){\n        activeProducts {\n          id\n          name\n          description\n          image\n          tiers {\n            name\n            currentPrice\n          }\n        }\n      }\n    }\n    `).then(completionHandler)\n}\n\n//React\nclass EntityManagement extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeStall: null,\n            stalls: null,\n            products: null\n        };\n\n        refreshStalls = () => {\n            fetchStalls(result => {\n                this.setState({\n                    stalls: result.stalls\n                });\n\n                //Update activeStall too\n                const activeStall = this.state.activeStall;\n\n                if (activeStall !== null) {\n                    //Get the product because the stalls don't come with them\n                    const products = activeStall.products;\n\n                    this.setState({\n                        activeStall: null  //In case it is deleted\n                    });\n\n                    result.stalls.forEach(stall => {\n                        if(stall.id === activeStall.id) {\n                            //Add the product to the new stall\n                            stall.products = products;\n                            this.setState({\n                                activeStall: stall //Make it active\n                            })\n                        }\n                    })\n                }\n            });\n        };\n\n        refreshStalls();\n\n        this.setActiveStall = this.setActiveStall.bind(this);\n    }\n\n    setActiveStall(stall) {\n        stall.products = null;\n\n        this.setState({\n            activeStall: stall\n        });\n\n        refreshProducts = () => {\n            fetchProducts(stall.id, result => {\n                let activeStall = this.state.activeStall;\n                activeStall.products = result.stall.activeProducts;\n\n                this.setState({\n                    activeStall: activeStall\n                })\n            });\n        };\n\n        refreshProducts();\n    }\n\n    render() {\n        return (\n            <div id=\"entity-management-frame\"\n                 className=\"container-fluid d-flex flex-row m-0 p-0 h-100 w-100\">\n                <Stalls stalls={this.state.stalls}\n                        activeStall={this.state.activeStall}\n                        setActiveStall={this.setActiveStall}/>\n                <Products activeStall={this.state.activeStall}/>\n            </div>\n        );\n    }\n}\n\nexport default EntityManagement"]}