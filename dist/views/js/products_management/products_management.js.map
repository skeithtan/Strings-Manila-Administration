{"version":3,"sources":["../../../../views/js/products_management/products_management.js"],"names":["fetchCollections","completionHandler","graphQL","query","response","fetchProducts","collectionID","EntityManagement","props","state","activeCollection","collections","products","refreshCollections","setState","result","forEach","collection","id","setActiveCollection","bind","refreshProducts","activeProducts","Component"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA;AACA,SAASA,gBAAT,CAA0BC,iBAA1B,EAA6C;AACzCC,YAAQ;AACJC,yJADI;AAOJC,kBAAUH;AAPN,KAAR;AASH;;AAED,SAASI,aAAT,CAAuBC,YAAvB,EAAqCL,iBAArC,EAAwD;AACpDC,YAAQ;AACJC,uDAC0BG,YAD1B,0XADI;AAgBJF,kBAAUH;AAhBN,KAAR;AAkBH;;AAED;;IACMM,gB;;;AACF,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA,wIACTA,KADS;;AAEf,cAAKC,KAAL,GAAa;AACTC,8BAAkB,IADT;AAETC,yBAAa,IAFJ;AAGTC,sBAAU;AAHD,SAAb;;AAMAC,6BAAqB,8BAAM;AACvBb,6BAAiB,kBAAU;AACvB,sBAAKc,QAAL,CAAc;AACVH,iCAAaI,OAAOJ;AADV,iBAAd;;AAIA;AACA,oBAAMD,mBAAmB,MAAKD,KAAL,CAAWC,gBAApC;;AAEA,oBAAIA,qBAAqB,IAAzB,EAA+B;AAC3B;AACA,wBAAME,WAAWF,iBAAiBE,QAAlC;;AAEA,0BAAKE,QAAL,CAAc;AACVJ,0CAAkB,IADR,CACc;AADd,qBAAd;;AAIAK,2BAAOJ,WAAP,CAAmBK,OAAnB,CAA2B,sBAAc;AACrC,4BAAIC,WAAWC,EAAX,KAAkBR,iBAAiBQ,EAAvC,EAA2C;AACvC;AACAD,uCAAWL,QAAX,GAAsBA,QAAtB;AACA,kCAAKE,QAAL,CAAc;AACVJ,kDAAkBO,UADR,CACmB;AADnB,6BAAd;AAGH;AACJ,qBARD;AASH;AACJ,aA1BD;AA2BH,SA5BD;;AA8BAJ;;AAEA,cAAKM,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBC,IAAzB,OAA3B;AAxCe;AAyClB;;;;4CAEmBH,U,EAAY;AAAA;;AAC5BA,uBAAWL,QAAX,GAAsB,IAAtB;;AAEA,iBAAKE,QAAL,CAAc;AACVJ,kCAAkBO;AADR,aAAd;;AAIAI,8BAAkB,2BAAM;AACpBhB,8BAAcY,WAAWC,EAAzB,EAA6B,kBAAU;AACnC,wBAAIR,mBAAmB,OAAKD,KAAL,CAAWC,gBAAlC;AACAA,qCAAiBE,QAAjB,GAA4BG,OAAOE,UAAP,CAAkBK,cAA9C;;AAEA,2BAAKR,QAAL,CAAc;AACVJ,0CAAkBA;AADR,qBAAd;AAGH,iBAPD;AAQH,aATD;;AAWAW;AACH;;;iCAEQ;AACL,mBACI;AAAA;AAAA,kBAAK,IAAG,yBAAR;AACK,+BAAU,qDADf;AAEI,uEAAa,aAAa,KAAKZ,KAAL,CAAWE,WAArC;AACQ,sCAAkB,KAAKF,KAAL,CAAWC,gBADrC;AAEQ,yCAAqB,KAAKS,mBAFlC,GAFJ;AAKI,oEAAU,kBAAkB,KAAKV,KAAL,CAAWC,gBAAvC;AALJ,aADJ;AASH;;;;EA3E0B,gBAAMa,S;;kBA8EtBhB,gB","file":"products_management.js","sourcesContent":["import React from 'react';\nimport Collections from './collections';\nimport Products from './products';\n\n//Fetch data\nfunction fetchCollections(completionHandler) {\n    graphQL({\n        query: `{\n                    collections {\n                        id\n                        name\n                    }\n                }`,\n        response: completionHandler,\n    });\n}\n\nfunction fetchProducts(collectionID, completionHandler) {\n    graphQL({\n        query: `{\n                  collection(id:${collectionID}){\n                    activeProducts {\n                      id\n                      name\n                      description\n                      image\n                      tiers {\n                        id\n                        name\n                        currentPrice\n                      }\n                    }\n                  }\n                }`,\n        response: completionHandler,\n    });\n}\n\n//React\nclass EntityManagement extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeCollection: null,\n            collections: null,\n            products: null\n        };\n\n        refreshCollections = () => {\n            fetchCollections(result => {\n                this.setState({\n                    collections: result.collections\n                });\n\n                //Update activeCollection too\n                const activeCollection = this.state.activeCollection;\n\n                if (activeCollection !== null) {\n                    //Get the product because the collections don't come with them\n                    const products = activeCollection.products;\n\n                    this.setState({\n                        activeCollection: null  //In case it is deleted\n                    });\n\n                    result.collections.forEach(collection => {\n                        if (collection.id === activeCollection.id) {\n                            //Add the product to the new collection\n                            collection.products = products;\n                            this.setState({\n                                activeCollection: collection //Make it active\n                            })\n                        }\n                    })\n                }\n            });\n        };\n\n        refreshCollections();\n\n        this.setActiveCollection = this.setActiveCollection.bind(this);\n    }\n\n    setActiveCollection(collection) {\n        collection.products = null;\n\n        this.setState({\n            activeCollection: collection\n        });\n\n        refreshProducts = () => {\n            fetchProducts(collection.id, result => {\n                let activeCollection = this.state.activeCollection;\n                activeCollection.products = result.collection.activeProducts;\n\n                this.setState({\n                    activeCollection: activeCollection\n                })\n            });\n        };\n\n        refreshProducts();\n    }\n\n    render() {\n        return (\n            <div id=\"entity-management-frame\"\n                 className=\"container-fluid d-flex flex-row m-0 p-0 h-100 w-100\">\n                <Collections collections={this.state.collections}\n                        activeCollection={this.state.activeCollection}\n                        setActiveCollection={this.setActiveCollection}/>\n                <Products activeCollection={this.state.activeCollection}/>\n            </div>\n        );\n    }\n}\n\nexport default EntityManagement"]}