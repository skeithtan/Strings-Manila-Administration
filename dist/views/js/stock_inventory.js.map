{"version":3,"sources":["../../../views/js/stock_inventory.js"],"names":["fetchStocks","completionHandler","graphQL","query","response","StockInventory","props","state","tiers","lessThan","greaterThan","refreshState","bind","onLessThanInput","onGreaterThanInput","getFilteredTiers","refreshStockInventory","showSuccessAlert","ascending","tierA","tierB","quantity","result","sort","setState","iziToast","success","title","message","timeout","progressBar","event","target","value","filteredTiers","filter","tier","loadingState","length","noProducts","Component","StockInventoryHead","StockTable","rows","map","id","emptyState","StockRow","isSingular","productDescription","rowClass","fillOutRestockModal","name","stall"],"mappings":"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","file":"stock_inventory.js","sourcesContent":["import React from 'react';\n\n//Fetch data\nfunction fetchStocks(completionHandler) {\n    graphQL({\n        query: `{\n                  tiers {\n                    id\n                    name\n                    quantity\n                    productDescription {\n                      isSingular\n                      name\n                      stall {\n                        name\n                      }\n                    }\n                  }\n                }`,\n        response: completionHandler,\n    });\n}\n\n//React\nclass StockInventory extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tiers: null,\n            lessThan: null,\n            greaterThan: null,\n        };\n\n        this.refreshState = this.refreshState.bind(this);\n        this.onLessThanInput = this.onLessThanInput.bind(this);\n        this.onGreaterThanInput = this.onGreaterThanInput.bind(this);\n        this.getFilteredTiers = this.getFilteredTiers.bind(this);\n\n        refreshStockInventory = this.refreshState;\n        this.refreshState();\n    }\n\n    refreshState(showSuccessAlert = false) {\n        fetchStocks(result => {\n\n            function ascending(tierA, tierB) {\n                return tierA.quantity - tierB.quantity // Lowest first\n            }\n\n            const tiers = result.tiers.sort(ascending);\n\n            this.setState({\n                tiers: tiers\n            });\n\n            if (showSuccessAlert) {\n                iziToast.success({\n                    title: \"Refreshed\",\n                    message: \"Data is up to date.\",\n                    timeout: 1500,\n                    progressBar: false\n                })\n            }\n        });\n    }\n\n    static noProducts() {\n        return (\n            <div className=\"container d-flex flex-column justify-content-center align-items-center h-100\">\n                <h3>There are no products yet.</h3>\n                <p className=\"text-faded\">When products are added, the inventory can be seen here.</p>\n            </div>\n        )\n    }\n\n    static loadingState() {\n        return (\n            <div className=\"container-fluid d-flex flex-column justify-content-center align-items-center h-100\">\n                <h3>Loading...</h3>\n            </div>\n        );\n    }\n\n    onLessThanInput(event) {\n        const lessThan = event.target.value;\n        this.setState({\n            lessThan: event.target.value === \"\" ? null : lessThan\n        });\n    }\n\n    onGreaterThanInput(event) {\n        const greaterThan = event.target.value;\n        this.setState({\n            greaterThan: event.target.value === \"\" ? null : greaterThan\n        });\n    }\n\n    getFilteredTiers() {\n        const lessThan = this.state.lessThan;\n        const greaterThan = this.state.greaterThan;\n\n        let filteredTiers = this.state.tiers; //No filter yet\n\n        if (lessThan === null && greaterThan === null) {\n            return filteredTiers;\n        }\n\n        if (filteredTiers === null) {\n            return filteredTiers;\n        }\n\n        if (lessThan !== null) {\n            filteredTiers = filteredTiers.filter(tier => {\n                return tier.quantity < lessThan\n            })\n        }\n\n        if (greaterThan !== null) {\n            filteredTiers = filteredTiers.filter(tier => {\n                return tier.quantity > greaterThan\n            })\n        }\n\n        return filteredTiers;\n    }\n\n    render() {\n        if (this.state.tiers === null) {\n            return StockInventory.loadingState();\n        }\n\n        if (this.state.tiers.length === 0) {\n            return StockInventory.noProducts();\n        }\n\n        const filteredTiers = this.getFilteredTiers();\n\n        return (\n            <div id=\"stock-inventory\"\n                 className=\"container-fluid m-0 p-0 h-100 w-100 d-flex flex-column\">\n                <StockInventoryHead refreshState={this.refreshState}\n                                    onLessThanInput={this.onLessThanInput}\n                                    onGreaterThanInput={this.onGreaterThanInput}/>\n                <StockTable tiers={filteredTiers}/>\n            </div>\n        )\n    }\n}\n\nclass StockInventoryHead extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div id=\"stock-inventory-head\"\n                 className=\"container-fluid d-flex flex-row bg-light page-head\">\n                <div className=\"mr-auto pt-5 row pl-3\">\n                    <h4 className=\"mr-3\">Inventory</h4>\n                    <div>\n                        <button className=\"btn btn-sm btn-outline-primary\"\n                                onClick={() => {\n                                    this.props.refreshState(true);\n                                }}>Refresh data\n                        </button>\n                    </div>\n                </div>\n                <div id=\"stock-filter\"\n                     className=\"row ml-auto mt-auto mb-2\">\n                    <div className=\"mt-auto mr-2\">\n                        <div className=\"mb-2 mb-sm-0\">\n                            <small className=\"text-muted mt-auto mb-2 mr-3 d-block\">Quantity filters</small>\n                            <div className=\"input-group\">\n                                <div className=\"input-group-addon\">Greater than</div>\n                                <input type=\"number\"\n                                       min=\"0\"\n                                       className=\"form-control\"\n                                       id=\"greater-than-filter\"\n                                       placeholder=\"No filter\"\n                                       onChange={this.props.onGreaterThanInput}/>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"mt-auto mr-4\">\n                        <div className=\"input-group mb-2 mb-sm-0\">\n                            <div className=\"input-group-addon\">Less than</div>\n                            <input className=\"form-control\"\n                                   id=\"less-than-filter\"\n                                   type=\"number\"\n                                   min=\"0\"\n                                   placeholder=\"No filter\"\n                                   onChange={this.props.onLessThanInput}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass StockTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.rows = this.rows.bind(this);\n    }\n\n    rows() {\n        return this.props.tiers.map(tier => <StockRow tier={tier}\n                                                      key={tier.id}/>);\n    }\n\n    static emptyState() {\n        return (\n            <div className=\"container-fluid d-flex flex-column align-items-center justify-content-center bg-light h-100\">\n                <h3>No results</h3>\n                <p className=\"text-faded\">Change your filter to try again</p>\n            </div>\n        )\n    }\n\n    render() {\n\n        if (this.props.tiers.length === 0) {\n            return StockTable.emptyState();\n        }\n\n        return (\n            <div id=\"stocks-table\" className=\"page-content d-flex flex-column\">\n                <table className=\"table table-hover page-table d-flex flex-column mb-0\">\n                    <thead className=\"thead-default\">\n                    <tr>\n                        <th>Product Name</th>\n                        <th>Tier</th>\n                        <th>Stall</th>\n                        <th>Quantity</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.rows()}\n                    </tbody>\n\n                </table>\n            </div>\n        );\n    }\n}\n\n\nclass StockRow extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    static rowClass(quantity) {\n        if (quantity === 0) {\n            return \"table-danger\"\n        }\n\n        if (quantity <= 20) {\n            return \"table-warning\";\n        }\n\n        return \"\";\n    }\n\n    render() {\n        const tier = this.props.tier;\n        const isSingular = tier.productDescription.isSingular;\n\n        return (\n            <tr className={StockRow.rowClass(tier.quantity)}\n                data-toggle=\"modal\"\n                data-target=\"#restock-modal\"\n                onClick={() => {\n                    fillOutRestockModal(tier)\n                }}>\n                <td>{tier.productDescription.name}</td>\n                <td className={isSingular ? \"text-muted\" : \"\"}>{isSingular ? <small>N/A</small> : tier.name}</td>\n                <td>{tier.productDescription.stall.name}</td>\n                <td><b>{tier.quantity}</b></td>\n            </tr>\n        );\n    }\n}\n\nexport default StockInventory;"]}