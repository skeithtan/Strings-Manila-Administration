{"version":3,"sources":["../../../views/js/stock_inventory.js"],"names":["fetchStocks","completionHandler","client","query","then","StockInventory","props","state","products","filteredProducts","lessThan","greaterThan","refreshState","bind","onLessThanInput","onGreaterThanInput","filterProducts","refreshStockInventory","completion","result","sort","a","b","quantity","setState","undefined","event","target","value","filter","product","loadingState","length","noProducts","render","Component","StockInventoryHead","refreshData","iziToast","success","StockTable","rows","map","index","fillOutRestockModal","$","val","id","html","name","hide","show","StockRow","rowClass","stall"],"mappings":"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","file":"stock_inventory.js","sourcesContent":["import React from 'react';\n\n//Fetch data\nfunction fetchStocks(completionHandler) {\n    client.query(`\n    {\n        products {\n            id\n            name\n            quantity\n            stall {\n                name\n            }\n        }\n    }\n    `).then(completionHandler);\n}\n\n//React\nclass StockInventory extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            products: null,\n            filteredProducts: null,\n            lessThan: null,\n            greaterThan: null,\n        };\n\n        this.refreshState = this.refreshState.bind(this);\n        this.onLessThanInput = this.onLessThanInput.bind(this);\n        this.onGreaterThanInput = this.onGreaterThanInput.bind(this);\n        this.filterProducts = this.filterProducts.bind(this);\n\n        refreshStockInventory = this.refreshState;\n        this.refreshState();\n    }\n\n    refreshState(completion) {\n        fetchStocks(result => {\n\n            // Lowest first\n            const products = result.products.sort((a, b) => {\n                return a.quantity > b.quantity\n            });\n\n            this.setState({\n                products: products\n            });\n\n            if (completion !== undefined) {\n                completion()\n            }\n        });\n    }\n\n    static noProducts() {\n        render(\n            <div className=\"container d-flex flex-column justify-content-center align-items-center h-100\">\n                <h3>There are no products yet.</h3>\n                <p className=\"text-faded\">When products are added, the stock count can be seen here.</p>\n            </div>\n        )\n    }\n\n    static loadingState() {\n        return (\n            <div>\n                <div className=\"container-fluid d-flex flex-column justify-content-center align-items-center h-100\">\n                    <h3>Loading...</h3>\n                </div>\n            </div>\n        );\n    }\n\n    onLessThanInput(event) {\n        const lessThan = event.target.value;\n        this.setState({\n            lessThan: event.target.value === \"\" ? null : lessThan\n        }, this.filterProducts);\n    }\n\n    onGreaterThanInput(event) {\n        const greaterThan = event.target.value;\n        this.setState({\n            greaterThan: event.target.value === \"\" ? null : greaterThan\n        }, this.filterProducts);\n    }\n\n    filterProducts() {\n        const lessThan = this.state.lessThan;\n        const greaterThan = this.state.greaterThan;\n\n        let filteredProducts = this.state.products; //No filter yet\n\n        if (lessThan === null && greaterThan === null) {\n            this.setState({\n                filteredProducts: filteredProducts\n            });\n\n            return;\n        }\n\n        if (filteredProducts === null) {\n            this.setState({\n                filteredProducts: null\n            });\n\n            return;\n        }\n\n        if (lessThan !== null) {\n            filteredProducts = filteredProducts.filter(product => {\n                return product.quantity < lessThan\n            })\n        }\n\n        if (greaterThan !== null) {\n            filteredProducts = filteredProducts.filter(product => {\n                return product.quantity > greaterThan\n            })\n        }\n\n        this.setState({\n            filteredProducts: filteredProducts\n        })\n    }\n\n    render() {\n        if (this.state.products === null) {\n            return StockInventory.loadingState();\n        }\n\n        if (this.state.products.length === 0) {\n            return StockInventory.noProducts();\n        }\n\n        let products = this.state.products;\n\n        if (this.state.filteredProducts !== null) {\n            products = this.state.filteredProducts;\n        }\n\n        return (\n            <div id=\"stock-inventory\"\n                 className=\"container-fluid m-0 p-0 h-100 w-100\">\n                <StockInventoryHead refreshState={this.refreshState}\n                                    onLessThanInput={this.onLessThanInput}\n                                    onGreaterThanInput={this.onGreaterThanInput}/>\n                <StockTable products={products}/>\n            </div>\n        )\n    }\n}\n\nclass StockInventoryHead extends React.Component {\n    constructor(props) {\n        super(props);\n        this.refreshData = this.refreshData.bind(this);\n    }\n\n    refreshData() {\n        this.props.refreshState(\n            iziToast.success({\n                \"title\": \"Refresh\",\n                \"message\": \"Data is up to date.\"\n            })\n        )\n    }\n\n    render() {\n        return (\n            <div id=\"stock-inventory-head\"\n                 className=\"container-fluid d-flex flex-row bg-light\">\n                <div className=\"mr-auto pt-5 row pl-3\">\n                    <h4 className=\"mr-3\">Stock Inventory</h4>\n                    <div>\n                        <button className=\"btn btn-sm btn-outline-primary\"\n                                onClick={this.refreshData}>Refresh data\n                        </button>\n                    </div>\n                </div>\n                <div id=\"stock-filter\"\n                     className=\"row ml-auto mt-auto mb-2\">\n                    <div className=\"mt-auto mr-2\">\n                        <div className=\"input-group mb-2 mb-sm-0\">\n                            <small className=\"text-muted mt-auto mb-2 mr-3 d-block\">Quantity filters</small>\n                            <div className=\"input-group-addon\">Greater than</div>\n                            <input className=\"form-control\"\n                                   id=\"greater-than-filter\"\n                                   type=\"number\"\n                                   min=\"0\"\n                                   placeholder=\"No filter\"\n                                   onChange={this.props.onGreaterThanInput}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"mt-auto mr-4\">\n                        <div className=\"input-group mb-2 mb-sm-0\">\n                            <div className=\"input-group-addon\">Less than</div>\n                            <input className=\"form-control\"\n                                   id=\"less-than-filter\"\n                                   type=\"number\"\n                                   min=\"0\"\n                                   placeholder=\"No filter\"\n                                   onChange={this.props.onLessThanInput}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass StockTable extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        const rows = this.props.products.map((product, index) => {\n            return <StockRow product={product}\n                             key={index}/>\n        });\n\n        return (\n            <div id=\"stocks-table\">\n                <table className=\"table table-hover\">\n                    <thead className=\"bg-light\">\n                    <tr>\n                        <th>Product Name</th>\n                        <th>Stall</th>\n                        <th>Quantity</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {rows}\n                    </tbody>\n\n                </table>\n            </div>\n        );\n    }\n}\n\nfunction fillOutRestockModal(product) {\n    $('#restock-product-id').val(product.id);\n    $('#restock-modal-product-name').html(product.name);\n    $('#restock-modal-product-quantity').html(product.quantity);\n\n    if (product.quantity === 0) {\n        $('#restock-button-group').hide();\n        $('#restock-dummy-button-group').show();\n    } else {\n        $('#restock-button-group').show();\n        $('#restock-dummy-button-group').hide();\n    }\n}\n\nclass StockRow extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    static rowClass(quantity) {\n        if (quantity === 0) {\n            return \"table-danger\"\n        }\n\n        if (quantity <= 20) {\n            return \"table-warning\";\n        }\n\n        return \"\";\n    }\n\n    render() {\n        return (\n            <tr className={StockRow.rowClass(this.props.product.quantity)}\n                data-toggle=\"modal\"\n                data-target=\"#restock-modal\"\n                onClick={() => {\n                    fillOutRestockModal(this.props.product)\n                }}>\n                <td>{this.props.product.name}</td>\n                <td>{this.props.product.stall.name}</td>\n                <td><b>{this.props.product.quantity}</b></td>\n            </tr>\n        );\n    }\n}\n\nexport default StockInventory;"]}