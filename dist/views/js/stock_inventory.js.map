{"version":3,"sources":["../../../views/js/stock_inventory.js"],"names":["fetchStocks","completionHandler","client","query","then","StockInventory","props","state","tiers","lessThan","greaterThan","refreshState","bind","onLessThanInput","onGreaterThanInput","getFilteredTiers","refreshStockInventory","completion","result","sort","a","b","quantity","setState","undefined","event","target","value","filteredTiers","filter","tier","loadingState","length","noProducts","Component","StockInventoryHead","refreshData","iziToast","success","title","message","timeout","progressBar","StockTable","rows","map","id","emptyState","StockRow","isSingular","productDescription","rowClass","fillOutRestockModal","name","stall"],"mappings":"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","file":"stock_inventory.js","sourcesContent":["import React from 'react';\n\n//Fetch data\nfunction fetchStocks(completionHandler) {\n    client.query(`\n    {\n      tiers {\n        id\n        name\n        quantity\n        productDescription {\n          isSingular\n          name\n          stall {\n            name\n          }\n        }\n      }\n    }\n    `).then(completionHandler);\n}\n\n//React\nclass StockInventory extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tiers: null,\n            lessThan: null,\n            greaterThan: null,\n        };\n\n        this.refreshState = this.refreshState.bind(this);\n        this.onLessThanInput = this.onLessThanInput.bind(this);\n        this.onGreaterThanInput = this.onGreaterThanInput.bind(this);\n        this.getFilteredTiers = this.getFilteredTiers.bind(this);\n\n        refreshStockInventory = this.refreshState;\n        this.refreshState();\n    }\n\n    refreshState(completion) {\n        fetchStocks(result => {\n\n            // Lowest first\n            const tiers = result.tiers.sort((a, b) => {\n                return a.quantity > b.quantity\n            });\n\n            this.setState({\n                tiers: tiers\n            });\n\n            if (completion !== undefined) {\n                completion()\n            }\n        });\n    }\n\n    static noProducts() {\n        return (\n            <div className=\"container d-flex flex-column justify-content-center align-items-center h-100\">\n                <h3>There are no products yet.</h3>\n                <p className=\"text-faded\">When products are added, the inventory can be seen here.</p>\n            </div>\n        )\n    }\n\n    static loadingState() {\n        return (\n            <div>\n                <div className=\"container-fluid d-flex flex-column justify-content-center align-items-center h-100\">\n                    <h3>Loading...</h3>\n                </div>\n            </div>\n        );\n    }\n\n    onLessThanInput(event) {\n        const lessThan = event.target.value;\n        this.setState({\n            lessThan: event.target.value === \"\" ? null : lessThan\n        });\n    }\n\n    onGreaterThanInput(event) {\n        const greaterThan = event.target.value;\n        this.setState({\n            greaterThan: event.target.value === \"\" ? null : greaterThan\n        });\n    }\n\n    getFilteredTiers() {\n        const lessThan = this.state.lessThan;\n        const greaterThan = this.state.greaterThan;\n\n        let filteredTiers = this.state.tiers; //No filter yet\n\n        if (lessThan === null && greaterThan === null) {\n            return filteredTiers;\n        }\n\n        if (filteredTiers === null) {\n            return filteredTiers;\n        }\n\n        if (lessThan !== null) {\n            filteredTiers = filteredTiers.filter(tier => {\n                return tier.quantity < lessThan\n            })\n        }\n\n        if (greaterThan !== null) {\n            filteredTiers = filteredTiers.filter(tier => {\n                return tier.quantity > greaterThan\n            })\n        }\n\n        return filteredTiers;\n    }\n\n    render() {\n        if (this.state.tiers === null) {\n            return StockInventory.loadingState();\n        }\n\n        if (this.state.tiers.length === 0) {\n            return StockInventory.noProducts();\n        }\n\n        const filteredTiers = this.getFilteredTiers();\n\n        return (\n            <div id=\"stock-inventory\"\n                 className=\"container-fluid m-0 p-0 h-100 w-100 d-flex flex-column\">\n                <StockInventoryHead refreshState={this.refreshState}\n                                    onLessThanInput={this.onLessThanInput}\n                                    onGreaterThanInput={this.onGreaterThanInput}/>\n                <StockTable tiers={filteredTiers}/>\n            </div>\n        )\n    }\n}\n\nclass StockInventoryHead extends React.Component {\n    constructor(props) {\n        super(props);\n        this.refreshData = this.refreshData.bind(this);\n    }\n\n    refreshData() {\n        this.props.refreshState(\n            iziToast.success({\n                title: \"Refreshed\",\n                message: \"Data is up to date.\",\n                timeout: 1500,\n                progressBar: false\n            })\n        )\n    }\n\n    render() {\n        return (\n            <div id=\"stock-inventory-head\"\n                 className=\"container-fluid d-flex flex-row bg-light\">\n                <div className=\"mr-auto pt-5 row pl-3\">\n                    <h4 className=\"mr-3\">Inventory</h4>\n                    <div>\n                        <button className=\"btn btn-sm btn-outline-primary\"\n                                onClick={this.refreshData}>Refresh data\n                        </button>\n                    </div>\n                </div>\n                <div id=\"stock-filter\"\n                     className=\"row ml-auto mt-auto mb-2\">\n                    <div className=\"mt-auto mr-2\">\n                        <div className=\"mb-2 mb-sm-0\">\n                            <small className=\"text-muted mt-auto mb-2 mr-3 d-block\">Quantity filters</small>\n                            <div className=\"input-group\">\n                                <div className=\"input-group-addon\">Greater than</div>\n                                <input type=\"number\"\n                                       min=\"0\"\n                                       className=\"form-control\"\n                                       id=\"greater-than-filter\"\n                                       placeholder=\"No filter\"\n                                       onChange={this.props.onGreaterThanInput}/>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"mt-auto mr-4\">\n                        <div className=\"input-group mb-2 mb-sm-0\">\n                            <div className=\"input-group-addon\">Less than</div>\n                            <input className=\"form-control\"\n                                   id=\"less-than-filter\"\n                                   type=\"number\"\n                                   min=\"0\"\n                                   placeholder=\"No filter\"\n                                   onChange={this.props.onLessThanInput}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass StockTable extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    static emptyState() {\n        return (\n            <div className=\"container-fluid d-flex flex-column align-items-center justify-content-center bg-light h-100\">\n                <h3>No results</h3>\n                <p className=\"text-faded\">Change your filter to try again</p>\n            </div>\n        )\n    }\n\n    render() {\n        const rows = this.props.tiers.map(tier => {\n            return <StockRow tier={tier}\n                             key={tier.id}/>;\n        });\n\n        if (rows.length === 0) {\n            return StockTable.emptyState();\n        }\n\n        return (\n            <div id=\"stocks-table\">\n                <table className=\"table table-hover\">\n                    <thead className=\"bg-light\">\n                    <tr>\n                        <th>Product Name</th>\n                        <th>Tier</th>\n                        <th>Stall</th>\n                        <th>Quantity</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {rows}\n                    </tbody>\n\n                </table>\n            </div>\n        );\n    }\n}\n\n\nclass StockRow extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    static rowClass(quantity) {\n        if (quantity === 0) {\n            return \"table-danger\"\n        }\n\n        if (quantity <= 20) {\n            return \"table-warning\";\n        }\n\n        return \"\";\n    }\n\n    render() {\n        const tier = this.props.tier;\n        const isSingular = tier.productDescription.isSingular;\n\n        return (\n            <tr className={StockRow.rowClass(tier.quantity)}\n                data-toggle=\"modal\"\n                data-target=\"#restock-modal\"\n                onClick={() => {\n                    fillOutRestockModal(tier)\n                }}>\n                <td>{tier.productDescription.name}</td>\n                <td className={isSingular ? \"text-muted\" : \"\"}>{isSingular ? <small>N/A</small> : tier.name}</td>\n                <td>{tier.productDescription.stall.name}</td>\n                <td><b>{tier.quantity}</b></td>\n            </tr>\n        );\n    }\n}\n\nexport default StockInventory;"]}