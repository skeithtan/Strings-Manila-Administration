{"version":3,"sources":["../main.js"],"names":["electron","require","app","BrowserWindow","ipcMain","path","url","mainWindow","createWindow","width","height","minHeight","minWidth","titleBarStyle","frame","loadURL","format","pathname","join","__dirname","protocol","slashes","on","process","platform","quit","loadOrdersReportWindow","reportData","window","title","webContents","send","event","arg"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;;IAEKC,G,GAA+BF,Q,CAA/BE,G;IAAKC,a,GAA0BH,Q,CAA1BG,a;IAAeC,O,GAAWJ,Q,CAAXI,O;;;AAEzB,IAAMC,OAAOJ,QAAQ,MAAR,CAAb;AACA,IAAMK,MAAML,QAAQ,KAAR,CAAZ;;AAEA;AACA;AACA,IAAIM,mBAAJ;;AAEA,SAASC,YAAT,GAAwB;AACpB;AACAD,iBAAa,IAAIJ,aAAJ,CAAkB;AAC3BM,eAAO,IADoB;AAE3BC,gBAAQ,GAFmB;AAG3BC,mBAAW,GAHgB;AAI3BC,kBAAU,IAJiB;AAK3BC,uBAAe,aALY;AAM3BC,eAAO;AANoB,KAAlB,CAAb;;AASA;AACAP,eAAWQ,OAAX,CAAmBT,IAAIU,MAAJ,CAAW;AAC1BC,kBAAUZ,KAAKa,IAAL,CAAUC,SAAV,EAAqB,+BAArB,CADgB;AAE1BC,kBAAU,OAFgB;AAG1BC,iBAAS;AAHiB,KAAX,CAAnB;;AAMA;AACA;;AAEA;AACAd,eAAWe,EAAX,CAAc,QAAd,EAAwB,YAAY;AAChC;AACA;AACA;AACAf,qBAAa,IAAb;AACH,KALD;AAOH;;AAED;AACA;AACA;AACAL,IAAIoB,EAAJ,CAAO,OAAP,EAAgBd,YAAhB;;AAEA;AACAN,IAAIoB,EAAJ,CAAO,mBAAP,EAA4B,YAAY;AACpC;AACA;AACA,QAAIC,QAAQC,QAAR,KAAqB,QAAzB,EAAmC;AAC/BtB,YAAIuB,IAAJ;AACH;AACJ,CAND;;AAQAvB,IAAIoB,EAAJ,CAAO,UAAP,EAAmB,YAAY;AAC3B;AACA;AACA,QAAIf,eAAe,IAAnB,EAAyB;AACrBC;AACH;AACJ,CAND;;AAQA;AACA;AACA,SAASkB,sBAAT,CAAgCC,UAAhC,EAA4C;AACxC,QAAIC,SAAS,IAAIzB,aAAJ,CAAkB;AAC3BM,eAAO,IADoB;AAE3BC,gBAAQ,GAFmB;AAG3BmB,eAAO,eAHoB;AAI3BjB,kBAAU,IAJiB;AAK3BD,mBAAW;AALgB,KAAlB,CAAb;;AAQAiB,WAAOb,OAAP,CAAeT,IAAIU,MAAJ,CAAW;AACtBC,kBAAUZ,KAAKa,IAAL,CAAUC,SAAV,EAAqB,2CAArB,CADY;AAEtBC,kBAAU,OAFY;AAGtBC,iBAAS;AAHa,KAAX,CAAf;;AAMAO,WAAOE,WAAP,CAAmBR,EAAnB,CAAsB,iBAAtB,EAAyC,YAAM;AAC3CM,eAAOE,WAAP,CAAmBC,IAAnB,CAAwB,SAAxB,EAAmCJ,UAAnC;AACH,KAFD;AAGH;;AAEDvB,QAAQkB,EAAR,CAAW,iBAAX,EAA8B,UAACU,KAAD,EAAQC,GAAR,EAAgB;AAC3CP,2BAAuBO,GAAvB;AACF,CAFD","file":"main.js","sourcesContent":["const electron = require('electron');\n\nlet {app, BrowserWindow, ipcMain} = electron;\n\nconst path = require('path');\nconst url = require('url');\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\nlet mainWindow;\n\nfunction createWindow() {\n    // Create the browser window.\n    mainWindow = new BrowserWindow({\n        width: 1400,\n        height: 800,\n        minHeight: 600,\n        minWidth: 1200,\n        titleBarStyle: \"hiddenInset\",\n        frame: false\n    });\n\n    // and load the index.html of the app.\n    mainWindow.loadURL(url.format({\n        pathname: path.join(__dirname, '/views/templates/sign-in.html'),\n        protocol: 'file:',\n        slashes: true\n    }));\n\n    // Open the DevTools.\n    // mainWindow.webContents.openDevTools()\n\n    // Emitted when the window is closed.\n    mainWindow.on('closed', function () {\n        // Dereference the window object, usually you would store windows\n        // in an array if your app supports multi windows, this is the time\n        // when you should delete the corresponding element.\n        mainWindow = null;\n    });\n\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', createWindow);\n\n// Quit when all windows are closed.\napp.on('window-all-closed', function () {\n    // On OS X it is common for applications and their menu bar\n    // to stay active until the user quits explicitly with Cmd + Q\n    if (process.platform !== 'darwin') {\n        app.quit();\n    }\n});\n\napp.on('activate', function () {\n    // On OS X it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (mainWindow === null) {\n        createWindow();\n    }\n});\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.\nfunction loadOrdersReportWindow(reportData) {\n    let window = new BrowserWindow({\n        width: 1000,\n        height: 900,\n        title: \"Orders Report\",\n        minWidth: 1000,\n        minHeight: 500\n    });\n\n    window.loadURL(url.format({\n        pathname: path.join(__dirname, '/views/templates/order-report-window.html'),\n        protocol: 'file:',\n        slashes: true\n    }));\n\n    window.webContents.on('did-finish-load', () => {\n        window.webContents.send('message', reportData);\n    });\n}\n\nipcMain.on('generate-report', (event, arg) => {\n   loadOrdersReportWindow(arg);\n});"]}